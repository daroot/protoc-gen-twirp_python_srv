# Code generated by protoc-gen-twirp_python_srv 1.0.0, DO NOT EDIT.
# source: echo.proto

try:
    import http.client as httplib
except ImportError:
    import httplib

import json
from collections import namedtuple
from enum import Enum
from functools import partial

from google.protobuf import json_format
from google.protobuf import symbol_database as _symbol_database
from werkzeug.wrappers import Request, Response

_sym_lookup = _symbol_database.Default().GetSymbol

Endpoint = namedtuple("Endpoint", ["name", "function", "input", "output"])


class Errors(Enum):
    Canceled = "canceled"
    Unknown = "unknown"
    InvalidArgument = "invalid_argument"
    DeadlineExceeded = "deadline_exceeded"
    NotFound = "not_found"
    BadRoute = "bad_route"
    AlreadyExists = "already_exists"
    PermisionDenied = "permission_denied"
    Unauthenticated = "unauthenticated"
    ResourceExhausted = "resource_exhausted"
    FailedPrecondition = "failed_precondition"
    Aborted = "aborted"
    OutOfRange = "out_of_range"
    Unimplemented = "unimplemented"
    Internal = "internal"
    Unavailable = "unavailable"
    DataLoss = "data_loss"
    NoError = ""

    @staticmethod
    def get_status_code(code):
        return {
            Errors.Canceled: 408,
            Errors.Unknown: 500,
            Errors.InvalidArgument: 400,
            Errors.DeadlineExceeded: 408,
            Errors.NotFound: 404,
            Errors.BadRoute: 404,
            Errors.AlreadyExists: 409,
            Errors.PermisionDenied: 403,
            Errors.Unauthenticated: 401,
            Errors.ResourceExhausted: 403,
            Errors.FailedPrecondition: 412,
            Errors.Aborted: 409,
            Errors.OutOfRange: 400,
            Errors.Unimplemented: 501,
            Errors.Internal: 500,
            Errors.Unavailable: 503,
            Errors.DataLoss: 500,
            Errors.NoError: 200,
        }.get(code, 500)


class TwirpException(httplib.HTTPException):
    def __init__(self, code, message, meta={}):
        if isinstance(code, Errors):
            self.code = code
        else:
            self.code = Errors.Unknown
        self.message = message
        self.meta = meta


class TwirpWSGIApp(object):
    def __init__(self, service=None, hooks=None):
        """Create a basic WSGI App for handling Twirp requests,
        with no endpoints.

        Meant to be subclassed by each individual service.
        """
        self.service = None
        self.hooks = None
        self._endpoints = {}

    def __call__(self, environ, start_response):
        ctx = {
            "package_name": self._package_name,
            "service_name": self._service_name,
        }
        try:
            return self.handle_request(ctx, environ, start_response)
        except Exception as e:
            return self.handle_error(ctx, e, environ, start_response)

    @staticmethod
    def json_decoder(request, data_obj=None):
        body = request.get_data(as_text=False)
        data = data_obj()
        json_format.Parse(body, data)
        return data

    @staticmethod
    def json_encoder(value, data_obj=None):
        if not isinstance(value, data_obj):
            raise TwirpException(
                Errors.Internal,
                ("bad service response type " + str(type(value)) +
                 ", expecting: " + data_obj.DESCRIPTOR.full_name))

        resp = Response(json_format.MessageToJson(
            value, preserving_proto_field_name=True),
            headers=[("Content-Type", "application/json")])
        return resp

    @staticmethod
    def proto_decoder(request, data_obj=None):
        body = request.get_data(as_text=False)
        data = data_obj()
        data.ParseFromString(body)
        return data

    @staticmethod
    def proto_encoder(value, data_obj=None):
        if not isinstance(value, data_obj):
            raise TwirpException(
                Errors.Internal,
                ("bad service response type " + str(type(value)) +
                 ", expecting: " + data_obj.DESCRIPTOR.full_name))

        resp = Response(value.SerializeToString(),
                        headers=[("Content-Type", "application/protobuf")])
        return resp

    def get_endpoint_methods(self, request):
        (_, url_pre, rpc_method) = request.path.rpartition(self._prefix + "/")
        if not url_pre or not rpc_method:
            raise TwirpException(
                Errors.BadRoute, "no handler for path " + request.path,
                {"twirp_invalid_route": "POST " + request.path},
            )

        endpoint = self._endpoints.get(rpc_method, None)
        if not endpoint:
            raise TwirpException(
                Errors.Unimplemented, "service has no endpoint " + rpc_method,
                {"twirp_invalide_route": "POST " + request.path})

        ctype = request.headers['Content-Type']
        if "json" in ctype:
            decoder = partial(self.json_decoder, data_obj=endpoint.input)
            encoder = partial(self.json_encoder, data_obj=endpoint.output)
        elif "protobuf" in ctype:
            decoder = partial(self.proto_decoder, data_obj=endpoint.input)
            encoder = partial(self.proto_encoder, data_obj=endpoint.output)
        else:
            raise TwirpException(
                Errors.BadRoute, "unexpected Content-Type: " + ctype,
                {"twirp_invalid_route": "POST " + request.path},
            )

        return endpoint.name, endpoint.function, decoder, encoder

    def do_hook(self, ctx, hook_name):
        if not self.hooks:
            return
        hook = getattr(self.hooks, hook_name, None)
        if hook:
            hook(ctx)

    def handle_request(self, ctx, environ, start_response):
        request = Request(environ)
        self.do_hook(ctx, "request_received")

        http_method = request.method
        if http_method != "POST":
            raise TwirpException(
                Errors.BadRoute,
                "unsupported method " + http_method + " (only POST is allowed)",
                {"twirp_invalid_route": http_method + " " + request.path},
            )
        ctx["http_method"] = "POST"
        ctx["url"] = request.path
        ctx["content-type"] = request.headers["Content-Type"]

        endpoint, func, decode, encode = self.get_endpoint_methods(request)
        ctx["endpoint"] = endpoint
        self.do_hook(ctx, "request_routed")

        input_arg = decode(request)
        result = func(input_arg)
        response = encode(result)
        self.do_hook(ctx, "response_prepared")

        ctx["status_code"] = 200
        self.do_hook(ctx, "response_sent")

        return response(environ, start_response)

    def handle_error(self, ctx, exc, environ, start_response):
        response = Response()
        if isinstance(exc, TwirpException):
            err = {
                "code": exc.code.value,
                "msg": exc.message,
                "meta": {},
            }
            if exc.meta:
                err["meta"].update(exc.meta)
            err["meta"].update(ctx)
            code = exc.code
        else:
            err = {
                "type": "Internal",
                "msg": ("There was an error but it could not be "
                        "serialized into JSON"),
                "meta": {
                    "raw_error": repr(exc),
                },
            }
            err["meta"].update(ctx)
            code = Errors.Internal

        response.status_code = Errors.get_status_code(code)
        response.set_data(json.dumps(err))
        # Force json for errors.
        response.headers["Content-Type"] = "application/json"

        ctx['status_code'] = response.status_code
        self.do_hook(ctx, "error")

        return response(environ, start_response)


class EchoImpl(object):
    """
    An echo service
    """
    def Repeat(self, echo_request):
        """
        Repeat the input as output
        """
        raise TwirpException(Errors.Unimplemented, "Repeat is unimplemented")

    def RepeatMultiple(self, echo_multi_request):
        """
        Repeat the input multiple times
        """
        raise TwirpException(Errors.Unimplemented, "RepeatMultiple is unimplemented")


class EchoServer(TwirpWSGIApp):
    def __init__(self, service, hooks=None):
        """Creates a new WSGI app for the Echo service.

        Args:
            service: An object with methods matching the protocol of
                EchoImpl, which implements the service logic.
            hooks: Optional object implementing any of the request
                lifecycle hooks protocol methods.
        """
        self.service = service
        self.hooks = hooks

        self._package_name = "example.echo"
        self._service_name = "example.echo.Echo"
        self._prefix = "/twirp/" + self._service_name

        self._endpoints = {
            "Repeat": Endpoint(
                name="Repeat",
                function=getattr(service, "Repeat"),
                input=_sym_lookup("example.echo.EchoRequest"),
                output=_sym_lookup("example.echo.EchoResponse"),
            ),
            "RepeatMultiple": Endpoint(
                name="RepeatMultiple",
                function=getattr(service, "RepeatMultiple"),
                input=_sym_lookup("example.echo.EchoMultiRequest"),
                output=_sym_lookup("example.echo.EchoResponse"),
            ),
        }
